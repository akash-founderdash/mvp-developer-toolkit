#!/bin/bash

set -euo pipefail

# Configuration
TEMPLATE_REPO="${TEMPLATE_REPO:-founderdash/event-engagement-toolkit}"
CLONE_DIR="/workspace/template"
PROJECT_DIR="/workspace/project"
MAX_RETRIES=3
RETRY_DELAY=5

# Logging function
log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo "{\"timestamp\":\"$timestamp\",\"level\":\"$level\",\"stage\":\"CREATING_REPO\",\"message\":\"$message\"}" >&2
}

log_info() {
    log "INFO" "$@"
}

log_error() {
    log "ERROR" "$@"
}

log_debug() {
    if [ "${LOG_LEVEL:-INFO}" = "DEBUG" ]; then
        log "DEBUG" "$@"
    fi
}

# Error handling
handle_error() {
    local exit_code=$?
    log_error "Template cloning failed with exit code $exit_code"
    
    # Update job status
    python3 /app/scripts/update-job-status.py \
        --job-id "$JOB_ID" \
        --error "Failed to clone template repository" || true
    
    exit $exit_code
}

trap handle_error ERR

# Retry function with exponential backoff
retry_with_backoff() {
    local cmd="$1"
    local retries=0
    local delay=$RETRY_DELAY
    
    while [ $retries -lt $MAX_RETRIES ]; do
        if eval "$cmd"; then
            return 0
        fi
        
        retries=$((retries + 1))
        if [ $retries -lt $MAX_RETRIES ]; then
            log_info "Command failed, retrying in ${delay}s (attempt $retries/$MAX_RETRIES)"
            sleep $delay
            delay=$((delay * 2))  # Exponential backoff
        fi
    done
    
    log_error "Command failed after $MAX_RETRIES attempts: $cmd"
    return 1
}

# Setup Git authentication
setup_git_auth() {
    log_info "Setting up Git authentication"
    
    # Get GitHub token from AWS Secrets Manager
    if [ -n "${GITHUB_TOKEN_SECRET:-}" ]; then
        log_info "Retrieving GitHub token from Secrets Manager"
        
        local github_token
        github_token=$(aws secretsmanager get-secret-value \
            --secret-id "$GITHUB_TOKEN_SECRET" \
            --query SecretString \
            --output text 2>/dev/null || echo "")
        
        if [ -n "$github_token" ]; then
            # Configure Git to use token authentication
            git config --global credential.helper store
            echo "https://oauth2:${github_token}@github.com" > ~/.git-credentials
            
            # Set Git user (required for commits)
            git config --global user.name "FounderDash Bot"
            git config --global user.email "bot@founderdash.com"
            
            log_info "Git authentication configured successfully"
        else
            log_error "Could not retrieve GitHub token from Secrets Manager"
            return 1
        fi
    else
        log_error "GITHUB_TOKEN_SECRET environment variable not set"
        return 1
    fi
}

# Clone template repository
clone_template() {
    log_info "Cloning template repository: $TEMPLATE_REPO"
    
    # Update progress
    python3 /app/scripts/update-job-status.py \
        --job-id "$JOB_ID" \
        --step "CREATING_REPO" \
        --progress 15
    
    # Remove existing directories if they exist
    rm -rf "$CLONE_DIR" "$PROJECT_DIR"
    
    # Create directories
    mkdir -p "$(dirname "$CLONE_DIR")"
    mkdir -p "$(dirname "$PROJECT_DIR")"
    
    # Clone template repository
    local clone_cmd="git clone --depth 1 https://github.com/$TEMPLATE_REPO.git '$CLONE_DIR'"
    
    if retry_with_backoff "$clone_cmd"; then
        log_info "Template repository cloned successfully"
    else
        log_error "Failed to clone template repository"
        return 1
    fi
}

# Create fresh project from template
create_fresh_project() {
    log_info "Creating fresh project from template"
    
    # Copy template to project directory (excluding .git)
    cp -r "$CLONE_DIR"/* "$PROJECT_DIR/" 2>/dev/null || true
    cp -r "$CLONE_DIR"/.[^.]* "$PROJECT_DIR/" 2>/dev/null || true
    
    # Remove .git directory to start fresh
    rm -rf "$PROJECT_DIR/.git"
    
    # Initialize fresh git repository
    cd "$PROJECT_DIR"
    git init
    git config user.name "FounderDash Bot"
    git config user.email "bot@founderdash.com"
    
    log_info "Fresh project created successfully"
}

# Create GitHub repository
create_github_repository() {
    log_info "Creating GitHub repository: $REPO_NAME"
    
    # Update progress
    python3 /app/scripts/update-job-status.py \
        --job-id "$JOB_ID" \
        --step "CREATING_REPO" \
        --progress 25
    
    cd "$PROJECT_DIR"
    
    # Create repository using GitHub CLI
    local create_cmd="gh repo create '$REPO_NAME' --private --description 'MVP for $BUSINESS_NAME - Generated by FounderDash' --clone=false"
    
    if retry_with_backoff "$create_cmd"; then
        log_info "GitHub repository created successfully: $REPO_NAME"
        
        # Get repository URL
        local repo_url
        repo_url=$(gh repo view "$REPO_NAME" --json url --jq '.url')
        log_info "Repository URL: $repo_url"
        
        # Store repository URL for later use
        echo "$repo_url" > /workspace/repo_url.txt
        
        # Add remote origin
        git remote add origin "https://github.com/${GITHUB_USERNAME:-founderdash-bot}/$REPO_NAME.git"
        
        return 0
    else
        log_error "Failed to create GitHub repository: $REPO_NAME"
        return 1
    fi
}

# Customize template with business information
customize_template() {
    log_info "Customizing template with business information"
    
    cd "$PROJECT_DIR"
    
    # Update package.json
    if [ -f "package.json" ]; then
        # Update name and description
        sed -i.bak "s/\"name\": \".*\"/\"name\": \"$SANITIZED_NAME\"/" package.json
        sed -i.bak "s/\"description\": \".*\"/\"description\": \"MVP for $BUSINESS_NAME\"/" package.json
        rm -f package.json.bak
        log_info "Updated package.json"
    fi
    
    # Update README.md
    if [ -f "README.md" ]; then
        cat > README.md << EOF
# $BUSINESS_NAME

$PRODUCT_DESCRIPTION

## Getting Started

This is a Next.js application generated by FounderDash.

### Prerequisites

- Node.js 18+ 
- pnpm (recommended) or npm

### Installation

1. Install dependencies:
   \`\`\`bash
   pnpm install
   \`\`\`

2. Set up environment variables:
   \`\`\`bash
   cp .env.example .env.local
   \`\`\`

3. Run the development server:
   \`\`\`bash
   pnpm dev
   \`\`\`

Open [http://localhost:3000](http://localhost:3000) to see your application.

## Deployment

This application is configured for deployment on Vercel.

## Generated by FounderDash

This MVP was automatically generated by FounderDash on $(date -u +"%Y-%m-%d %H:%M:%S UTC").
EOF
        log_info "Updated README.md"
    fi
    
    # Create initial commit
    git add .
    git commit -m "Initial commit: $BUSINESS_NAME MVP

Generated by FounderDash
Business: $BUSINESS_NAME
Description: $PRODUCT_DESCRIPTION
Generated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
    
    log_info "Template customization completed"
}

# Push to GitHub
push_to_github() {
    log_info "Pushing code to GitHub"
    
    cd "$PROJECT_DIR"
    
    # Update progress
    python3 /app/scripts/update-job-status.py \
        --job-id "$JOB_ID" \
        --step "CREATING_REPO" \
        --progress 35
    
    # Push to main branch
    local push_cmd="git push -u origin main"
    
    if retry_with_backoff "$push_cmd"; then
        log_info "Code pushed successfully to GitHub"
        
        # Create and push staging branch
        git checkout -b staging
        git push origin staging
        git checkout main
        
        log_info "Staging branch created and pushed"
        return 0
    else
        log_error "Failed to push code to GitHub"
        return 1
    fi
}

# Main function
main() {
    log_info "Starting template cloning and repository creation"
    log_info "Template: $TEMPLATE_REPO"
    log_info "Business: $BUSINESS_NAME"
    log_info "Repository: $REPO_NAME"
    
    setup_git_auth
    clone_template
    create_fresh_project
    create_github_repository
    customize_template
    push_to_github
    
    # Update progress
    python3 /app/scripts/update-job-status.py \
        --job-id "$JOB_ID" \
        --step "CREATING_REPO" \
        --progress 40
    
    log_info "Template cloning and repository creation completed successfully"
    log_info "Project directory: $PROJECT_DIR"
    
    # Store project directory for next stage
    echo "$PROJECT_DIR" > /workspace/project_dir.txt
}

# Run main function
main "$@"